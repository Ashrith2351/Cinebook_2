{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n  }\n  getMovieById(id) {\n    return this.http.get('/assets/movies.json').pipe(map(movies => movies.find(m => m.id === id)) // Ensure you have 'id' or use appropriate identifier\n    );\n  }\n  static #_ = this.ɵfac = function MovieService_Factory(t) {\n    return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MovieService,\n    factory: MovieService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","MovieService","constructor","http","getMovieById","id","get","pipe","movies","find","m","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\MS\\SWE-632\\cinebook\\cinebook_app\\src\\app\\services\\movie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n\n  constructor(private http: HttpClient) {}\n\n  getMovieById(id: string): Observable<any> {\n    return this.http.get('/assets/movies.json').pipe(\n      map((movies: any[]) => movies.find(m => m.id === id)) // Ensure you have 'id' or use appropriate identifier\n    );\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,YAAYA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,qBAAqB,CAAC,CAACC,IAAI,CAC9CP,GAAG,CAAEQ,MAAa,IAAKA,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC;KACvD;EACH;EAAC,QAAAM,CAAA,G;qBARUV,YAAY,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZf,YAAY;IAAAgB,OAAA,EAAZhB,YAAY,CAAAiB,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}