{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let BookTicketsComponent = class BookTicketsComponent {\n  constructor(router) {\n    this.router = router;\n    this.showtimes = ['9AM', '12PM', '6PM', '9PM'];\n    this.seatMap = [[{\n      number: 'A1',\n      booked: false\n    }, {\n      number: 'A2',\n      booked: false\n    }, {\n      number: 'A3',\n      booked: true\n    }, {\n      number: 'A4',\n      booked: false\n    }], [{\n      number: 'B1',\n      booked: false\n    }, {\n      number: 'B2',\n      booked: false\n    }, {\n      number: 'B3',\n      booked: false\n    }, {\n      number: 'B4',\n      booked: true\n    }]\n    // Add more rows\n    ];\n\n    this.selectedShowtime = null;\n    this.selectedSeats = [];\n  }\n  ngOnInit() {\n    this.movie = history.state.movie; // Get the selected movie from the state\n  }\n\n  selectShowtime(time) {\n    this.selectedShowtime = time;\n  }\n  selectSeat(seat) {\n    if (!seat.booked) {\n      this.selectedSeats.push(seat);\n      seat.booked = true;\n    }\n  }\n  confirmBooking() {\n    if (!this.isUserLoggedIn()) {\n      // Redirect to login, passing the return URL as a query parameter\n      this.router.navigate(['/login'], {\n        queryParams: {\n          returnUrl: this.router.url\n        }\n      });\n    } else {\n      // Proceed with booking confirmation\n      alert(`Booking confirmed! Showtime: ${this.selectedShowtime}, Seats: ${this.selectedSeats.map(s => s.number).join(', ')}`);\n    }\n  }\n  isUserLoggedIn() {\n    // Check if the user is logged in (you can change this logic with actual auth check)\n    return !!localStorage.getItem('userToken'); // Assuming you store a token in local storage after login\n  }\n};\n\nBookTicketsComponent = __decorate([Component({\n  selector: 'app-book-tickets',\n  templateUrl: './book-tickets.component.html',\n  styleUrls: ['./book-tickets.component.css']\n})], BookTicketsComponent);","map":{"version":3,"names":["Component","BookTicketsComponent","constructor","router","showtimes","seatMap","number","booked","selectedShowtime","selectedSeats","ngOnInit","movie","history","state","selectShowtime","time","selectSeat","seat","push","confirmBooking","isUserLoggedIn","navigate","queryParams","returnUrl","url","alert","map","s","join","localStorage","getItem","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MS\\SWE-632\\cinebook\\cinebook_app\\src\\app\\book-tickets\\book-tickets.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-book-tickets',\n  templateUrl: './book-tickets.component.html',\n  styleUrls: ['./book-tickets.component.css']\n})\nexport class BookTicketsComponent implements OnInit {\n  showtimes = ['9AM', '12PM', '6PM', '9PM'];\n  seatMap = [\n    [{ number: 'A1', booked: false }, { number: 'A2', booked: false }, { number: 'A3', booked: true }, { number: 'A4', booked: false }],\n    [{ number: 'B1', booked: false }, { number: 'B2', booked: false }, { number: 'B3', booked: false }, { number: 'B4', booked: true }],\n    // Add more rows\n  ];\n  selectedShowtime: string | null = null;\n  selectedSeats: any[] = [];\n  movie: any;\n\n  constructor(private router: Router) {}\n\n  ngOnInit(): void {\n    this.movie = history.state.movie; // Get the selected movie from the state\n  }\n\n  selectShowtime(time: string) {\n    this.selectedShowtime = time;\n  }\n\n  selectSeat(seat: any) {\n    if (!seat.booked) {\n      this.selectedSeats.push(seat);\n      seat.booked = true;\n    }\n  }\n\n  confirmBooking() {\n    if (!this.isUserLoggedIn()) {\n      // Redirect to login, passing the return URL as a query parameter\n      this.router.navigate(['/login'], { queryParams: { returnUrl: this.router.url } });\n    } else {\n      // Proceed with booking confirmation\n      alert(`Booking confirmed! Showtime: ${this.selectedShowtime}, Seats: ${this.selectedSeats.map(s => s.number).join(', ')}`);\n    }\n  }\n\n  isUserLoggedIn(): boolean {\n    // Check if the user is logged in (you can change this logic with actual auth check)\n    return !!localStorage.getItem('userToken'); // Assuming you store a token in local storage after login\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAW/BC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAV1B,KAAAC,SAAS,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC;IACzC,KAAAC,OAAO,GAAG,CACR,CAAC;MAAEC,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAE,EAAE;MAAED,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAE,EAAE;MAAED,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAI,CAAE,EAAE;MAAED,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAE,CAAC,EACnI,CAAC;MAAED,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAE,EAAE;MAAED,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAE,EAAE;MAAED,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAE,EAAE;MAAED,MAAM,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAI,CAAE;IAClI;IAAA,CACD;;IACD,KAAAC,gBAAgB,GAAkB,IAAI;IACtC,KAAAC,aAAa,GAAU,EAAE;EAGY;EAErCC,QAAQA,CAAA;IACN,IAAI,CAACC,KAAK,GAAGC,OAAO,CAACC,KAAK,CAACF,KAAK,CAAC,CAAC;EACpC;;EAEAG,cAAcA,CAACC,IAAY;IACzB,IAAI,CAACP,gBAAgB,GAAGO,IAAI;EAC9B;EAEAC,UAAUA,CAACC,IAAS;IAClB,IAAI,CAACA,IAAI,CAACV,MAAM,EAAE;MAChB,IAAI,CAACE,aAAa,CAACS,IAAI,CAACD,IAAI,CAAC;MAC7BA,IAAI,CAACV,MAAM,GAAG,IAAI;;EAEtB;EAEAY,cAAcA,CAAA;IACZ,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE,EAAE;MAC1B;MACA,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;QAAEC,WAAW,EAAE;UAAEC,SAAS,EAAE,IAAI,CAACpB,MAAM,CAACqB;QAAG;MAAE,CAAE,CAAC;KAClF,MAAM;MACL;MACAC,KAAK,CAAC,gCAAgC,IAAI,CAACjB,gBAAgB,YAAY,IAAI,CAACC,aAAa,CAACiB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACrB,MAAM,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;;EAE9H;EAEAR,cAAcA,CAAA;IACZ;IACA,OAAO,CAAC,CAACS,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EAC9C;CACD;;AA1CY7B,oBAAoB,GAAA8B,UAAA,EALhC/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWjC,oBAAoB,CA0ChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}