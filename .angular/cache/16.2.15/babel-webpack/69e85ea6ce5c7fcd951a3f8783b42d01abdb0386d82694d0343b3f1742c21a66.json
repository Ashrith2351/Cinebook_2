{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let BookTicketsComponent = class BookTicketsComponent {\n  constructor(router, route, location, movieService, cinemaService) {\n    this.router = router;\n    this.route = route;\n    this.location = location;\n    this.movieService = movieService;\n    this.cinemaService = cinemaService;\n    this.cinemas = [];\n    this.selectedDate = new Date();\n    this.selectedShowtime = '';\n    this.dates = [];\n  }\n  ngOnInit() {\n    const movieId = this.route.snapshot.paramMap.get('id');\n    // Ensure the movieId is not null or undefined before using it\n    if (movieId !== null) {\n      const movieIndex = +movieId; // Convert movieId to number (array index)\n      // Fetch movie details based on the movie ID from the JSON file\n      this.movieService.getMovies().subscribe(movies => {\n        if (movies && movieIndex >= 0 && movieIndex < movies.length) {\n          this.movie = movies[movieIndex]; // Fetch the movie using the index\n        }\n      });\n    }\n\n    this.generateWeekDates();\n    this.loadCinemas();\n    this.loadMovies();\n  }\n  loadMovies() {\n    this.movieService.getMovies().subscribe(movies => {\n      this.movie = movies[0]; // Load the first movie or based on some condition\n    });\n  }\n\n  generateWeekDates() {\n    for (let i = 0; i < 7; i++) {\n      const date = new Date();\n      date.setDate(this.selectedDate.getDate() + i);\n      this.dates.push(date);\n    }\n  }\n  loadCinemas() {\n    this.cinemaService.getCinemas().subscribe(data => {\n      this.cinemas = data;\n    }, error => {\n      console.error('Error fetching cinemas:', error);\n    });\n  }\n  selectDate(date) {\n    this.selectedDate = date;\n  }\n  selectShowtime(cinema, showtime) {\n    const navigationExtras = {\n      state: {\n        movie: this.movie,\n        cinema: cinema,\n        date: this.selectedDate,\n        showtime: showtime\n      }\n    };\n    this.router.navigate(['/seat-selection'], navigationExtras);\n  }\n  goBack() {\n    this.location.back();\n  }\n};\nBookTicketsComponent = __decorate([Component({\n  selector: 'app-book-tickets',\n  templateUrl: './book-tickets.component.html',\n  styleUrls: ['./book-tickets.component.css']\n})], BookTicketsComponent);","map":{"version":3,"names":["Component","BookTicketsComponent","constructor","router","route","location","movieService","cinemaService","cinemas","selectedDate","Date","selectedShowtime","dates","ngOnInit","movieId","snapshot","paramMap","get","movieIndex","getMovies","subscribe","movies","length","movie","generateWeekDates","loadCinemas","loadMovies","i","date","setDate","getDate","push","getCinemas","data","error","console","selectDate","selectShowtime","cinema","showtime","navigationExtras","state","navigate","goBack","back","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\MS\\SWE-632\\cinebook\\cinebook_app\\src\\app\\book-tickets\\book-tickets.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router, NavigationExtras } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { MovieService } from '../services/movie.service';\nimport { CinemaService } from '../services/cinema.service';\n\n@Component({\n  selector: 'app-book-tickets',\n  templateUrl: './book-tickets.component.html',\n  styleUrls: ['./book-tickets.component.css']\n})\nexport class BookTicketsComponent implements OnInit {\n  movie: any;\n  cinemas: any[] = [];\n  selectedDate: Date = new Date();\n  selectedShowtime: string = '';\n  dates: Date[] = [];\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private location: Location,\n    private movieService: MovieService,\n    private cinemaService: CinemaService\n  ) {}\n\n  ngOnInit(): void {\n    const movieId = this.route.snapshot.paramMap.get('id');\n    \n    // Ensure the movieId is not null or undefined before using it\n    if (movieId !== null) {\n      const movieIndex = +movieId; // Convert movieId to number (array index)\n\n      // Fetch movie details based on the movie ID from the JSON file\n      this.movieService.getMovies().subscribe((movies: any[]) => {\n        if (movies && movieIndex >= 0 && movieIndex < movies.length) {\n          this.movie = movies[movieIndex]; // Fetch the movie using the index\n        }\n      });\n    }\n    this.generateWeekDates();\n    this.loadCinemas();\n    this.loadMovies();\n  }\n\n  loadMovies() {\n    this.movieService.getMovies().subscribe(movies => {\n      this.movie = movies[0]; // Load the first movie or based on some condition\n    });\n  }\n\n  generateWeekDates() {\n    for (let i = 0; i < 7; i++) {\n      const date = new Date();\n      date.setDate(this.selectedDate.getDate() + i);\n      this.dates.push(date);\n    }\n  }\n\n  loadCinemas() {\n    this.cinemaService.getCinemas().subscribe(data => {\n      this.cinemas = data;\n    }, error => {\n      console.error('Error fetching cinemas:', error);\n    });\n  }\n\n  selectDate(date: Date) {\n    this.selectedDate = date;\n  }\n\n  selectShowtime(cinema: any, showtime: string) {\n    const navigationExtras: NavigationExtras = {\n      state: {\n        movie: this.movie,\n        cinema: cinema,\n        date: this.selectedDate,\n        showtime: showtime\n      }\n    };\n    this.router.navigate(['/seat-selection'], navigationExtras);\n  }\n\n  goBack() {\n    this.location.back();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}